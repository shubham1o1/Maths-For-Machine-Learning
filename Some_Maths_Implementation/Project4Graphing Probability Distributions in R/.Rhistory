setwd("F:/python/ml-ai-dl/maths/Udemy - Mathematical Foundation For Machine Learning and AI/codes/Project4Graphing Probability Distributions in R")
getwd()
# Graphing Probability Distributions in R
# Example: Plotting the normal distribution of children's IQ scores -
# mean of 100 and standard deviation of 15
# What percentage of children have an IQ score greater than 115?
# Define Parameters of Distribution
mean = 100
standev = 15
# Define lower and upper bounds of region of interest
lower = 115
upper = Inf
# Generate sequence of numbers and make normal distribution
x <- seq(-4, 4, length=100)*standev + mean
prob <- dnorm(x, mean, standev)
# Make plot and add probability distribution and axis labels
plot(x, prob, type="n", xlab = "IQ Values", ylab = "P(x)",
main = "Normal Distribution of IQ Scores", axes = FALSE)
lines(x, prob)
axis(1, at=seq(40, 160, 20), pos=0)
# Generate polygon for region of interest
i <- x >= lower & x <= upper
polygon(c(lower,x[i],upper), c(0,prob[i],0), col="red")
# Calculate are under curve for region of interest and print results
area <- 1 - pnorm(lower, mean, standev)
result <- paste("P(",lower,"< IQ <",upper,") =", signif(area, digits=3))
mtext(result,3)
source('F:/python/ml-ai-dl/maths/Udemy - Mathematical Foundation For Machine Learning and AI/codes/Project4Graphing Probability Distributions in R/GraphingProbabilityDistributions.R', echo=TRUE)
source('F:/python/ml-ai-dl/maths/Udemy - Mathematical Foundation For Machine Learning and AI/codes/Project4Graphing Probability Distributions in R/GraphingProbabilityDistributions.R', echo=TRUE)
# Define Parameters of Distribution
mean = 100
# Graphing Probability Distributions in R
# Example: Plotting the normal distribution of children's IQ scores -
# mean of 100 and standard deviation of 15
# What percentage of children have an IQ score greater than 115?
# Define Parameters of Distribution
mean = 100
standev = 15
# Define lower and upper bounds of region of interest
lower = 115
upper = Inf
# Generate sequence of numbers and make normal distribution
x <- seq(-4, 4, length=100)*standev + mean
#Generating probability distribution
# Normal density function
prob <- dnorm(x, mean, standev)
# Make plot and add probability distribution and axis labels
plot(x, prob, type="n", xlab = "IQ Values", ylab = "P(x)",
main = "Normal Distribution of IQ Scores", axes = FALSE)
#make a lines plot
lines(x, prob)
# Generate polygon for region of interest
i <- x >= lower & x <= upper
polygon(c(lower,x[i],upper), c(0,prob[i],0), col="red")
# Calculate are under curve for region of interest and print results
area <- 1 - pnorm(lower, mean, standev)
result <- paste("P(",lower,"< IQ <",upper,") =", signif(area, digits=3))
mtext(result,3)
# Graphing Probability Distributions in R
# Example: Plotting the normal distribution of children's IQ scores -
# mean of 100 and standard deviation of 15
# What percentage of children have an IQ score greater than 115?
# Define Parameters of Distribution
mean = 100
standev = 15
# Define lower and upper bounds of region of interest
lower = 115
upper = Inf
# Generate sequence of numbers and make normal distribution
x <- seq(-4, 4, length=100)*standev + mean
#Generating probability distribution
# Normal density function
prob <- dnorm(x, mean, standev)
# Make plot and add probability distribution and axis labels
plot(x, prob, type="n", xlab = "IQ Values", ylab = "P(x)",
main = "Normal Distribution of IQ Scores", axes = FALSE)
#make a lines plot
lines(x, prob)
axis(1, at=seq(40, 160, 20), pos=0)
# Generate polygon for region of interest
i <- x >= lower & x <= upper
polygon(c(lower,x[i],upper), c(0,prob[i],0), col="red")
# Calculate are under curve for region of interest and print results
area <- 1 - pnorm(lower, mean, standev)
result <- paste("P(",lower,"< IQ <",upper,") =", signif(area, digits=3))
mtext(result,3)
setwd("F:/python/ml-ai-dl/maths/Udemy - Mathematical Foundation For Machine Learning and AI/codes/project5CovarianceMatricesinR")
getwd()
# Building a Covariance Matrix in R - Two Ways
# Create column vectors
a <- c(1,2,3,4,5,6)
b <- c(1,3,5,7,9,11)
c <- c(10, 20, 30, 40, 50, 60)
d <- c(2, 5, 5, 2, 1, 0)
e <- c(4, 5, 6, 7, 8, 9)
# Create matrix from vectors
M <- cbind(a, b, c, d, e)
k <- ncol(M)
n <- nrow(M)
print(M)
# Find the mean for each column
k_mean <- matrix(data = 1, nrow = n) %*% cbind(mean(a), mean(b), mean(c), mean(d), mean(e))
print(k_mean)
# Create a difference matrix
diffM <- M - k_mean
print(diffM)
# Create the covariance matrix
covarM <- (n-1)^-1 * t(diffM) %*% diffM #sample covariance
print(covarM)
# Find variances from the covariance matrix
variance <- diag(covarM)
print(variance)
# Use R's built-in functions
print(cov(M))
# Building a Covariance Matrix in R - Two Ways
# Create column vectors
a <- c(1,2,3,4,5,6)
b <- c(1,3,5,7,9,11)
c <- c(10, 20, 30, 40, 50, 60)
d <- c(2, 5, 5, 2, 1, 0)
e <- c(4, 5, 6, 7, 8, 9)
# Building a Covariance Matrix in R - Two Ways
# Create column vectors
a <- c(1,2,3,4,5,6)
b <- c(1,3,5,7,9,11)
c <- c(10, 20, 30, 40, 50, 60)
d <- c(2, 5, 5, 2, 1, 0)
e <- c(4, 5, 6, 7, 8, 9)
# Create matrix from vectors
M <- cbind(a, b, c, d, e)
k <- ncol(M) # no. of columns of m
n <- nrow(M) # no. of rows of n
# Building a Covariance Matrix in R - Two Ways
# Create column vectors
a <- c(1,2,3,4,5,6)
b <- c(1,3,5,7,9,11)
c <- c(10, 20, 30, 40, 50, 60)
d <- c(2, 5, 5, 2, 1, 0)
e <- c(4, 5, 6, 7, 8, 9)
# Create matrix from vectors
M <- cbind(a, b, c, d, e)
k <- ncol(M) # no. of columns of m
n <- nrow(M) # no. of rows of n
print(M)
# Find the mean for each column
k_mean <- matrix(data = 1, nrow = n) %*% cbind(mean(a), mean(b), mean(c), mean(d), mean(e))
print(k_mean)
# Create a difference matrix
diffM <- M - k_mean
print(diffM)
# Create the covariance matrix
covarM <- (n-1)^-1 * t(diffM) %*% diffM #sample covariance
print(covarM)
# Find variances from the covariance matrix
variance <- diag(covarM)
print(variance)
# Use R's built-in functions
print(cov(M))
getwd()
# Building a Covariance Matrix in R - Two Ways
# Create column vectors
a <- c(1,2,3,4,5,6)
b <- c(1,3,5,7,9,11)
c <- c(10, 20, 30, 40, 50, 60)
d <- c(2, 5, 5, 2, 1, 0)
e <- c(4, 5, 6, 7, 8, 9)
# Create matrix from vectors
M <- cbind(a, b, c, d, e)
k <- ncol(M) # no. of columns of m
n <- nrow(M) # no. of rows of n
print(M)
# Find the mean for each column
# %*% means matrix multiplication
# Mean means expectation
k_mean <- matrix(data = 1, nrow = n) %*% cbind(mean(a), mean(b), mean(c), mean(d), mean(e))
print(k_mean)
# Create a difference matrix
diffM <- M - k_mean
print(diffM)
# Create the covariance matrix
covarM <- (n-1)^-1 * t(diffM) %*% diffM #sample covariance
print(covarM)
# Find variances from the covariance matrix
variance <- diag(covarM)
print(variance)
# Use R's built-in functions
print(cov(M))
setwd("F:/python/ml-ai-dl/maths/Udemy - Mathematical Foundation For Machine Learning and AI/codes/Project4Graphing Probability Distributions in R")
getwd()
# Graphing Probability Distributions in R
# Example: Plotting the normal distribution of children's IQ scores -
# mean of 100 and standard deviation of 15
# What percentage of children have an IQ score greater than 115?
# Define Parameters of Distribution
mean = 100
standev = 15
# Define lower and upper bounds of region of interest
lower = 115
upper = Inf
# Generate sequence of numbers and make normal distribution
x <- seq(-4, 4, length=100)*standev + mean
#Generating probability distribution
# Normal density function
prob <- dnorm(x, mean, standev)
# Make plot and add probability distribution and axis labels
plot(x, prob, type="n", xlab = "IQ Values", ylab = "P(x)",
main = "Normal Distribution of IQ Scores", axes = FALSE)
#make a lines plot
lines(x, prob)
axis(1, at=seq(40, 160, 20), pos=0)
# Generate polygon for region of interest
i <- x >= lower & x <= upper
polygon(c(lower,x[i],upper), c(0,prob[i],0), col="red")
# Calculate are under curve for region of interest and print results
# pnorm -> integral of p(x)dx
area <- 1 - pnorm(lower, mean, standev)
result <- paste("P(",lower,"< IQ <",upper,") =", signif(area, digits=3))
mtext(result,3)
